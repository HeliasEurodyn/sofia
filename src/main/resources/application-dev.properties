# Web config.
server.port = 15502
server.servlet.context-path = /api

sofia.db.ip = localhost
sofia.db.port = 3306 
sofia.db.name = sofia4
sofia.db.username = root
sofia.db.password =

#hibernate.allow_update_outside_transaction=true
## DB config.
spring.datasource.name=sofiaDS
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.datasource.url=jdbc:mysql://${sofia.db.ip}:${sofia.db.port}/${sofia.db.name}?autoReconnect=true&createDatabaseIfNotExist=true&useSSL=false&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=${sofia.db.username}
spring.datasource.password=${sofia.db.password}

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
##spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
## Do not modify db on startup

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none

spring.jpa.open-in-view=true
spring.jpa.show-sql = false
spring.jpa.properties.hibernate.format_sql = true

spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false

#com.crm.sofia.jwt_secret = vrZtOEfYGhMcc68b329da9893e34099c7d8ad5cb9c940
#com.crm.sofia.jwt_ttl_minutes = 1440
#com.crm.sofia.jwt_issuer = sofia.app

#cveSearchUrl = https://localhost:5050/api
cveSearchUrl = https://cvepremium.circl.lu/api


spring.security.oauth2.client.registration.keycloak.client-id=rita
spring.security.oauth2.client.registration.keycloak.client-secret=3e140e26-1a8d-4207-a5b6-693043cf41c8
spring.security.oauth2.client.registration.keycloak.client-name=rita
spring.security.oauth2.client.registration.keycloak.scope=openid, roles
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.client-authentication-method=basic
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8888/auth/realms/master/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8888/auth/realms/master/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8888/auth/realms/master/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8888/auth/realms/master/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#spring.security.oauth2.client.registration.keycloak.provider=keycloak
#spring.security.oauth2.client.registration.keycloak.client-id=rita
#spring.security.oauth2.client.registration.keycloak.client-secret=3e140e26-1a8d-4207-a5b6-693043cf41c8
#spring.security.oauth2.client.registration.keycloak.scope=openid
#
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8888/auth/realms/master
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8888/auth/realms/master/protocol/openid-connect/token
#spring.security.oauth2.client.provider.keycloak.authorization-uri=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
#spring.security.oauth2.client.provider.keycloak.user-info-uri=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
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=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
#
#spring.security.oauth2.client.registration.keycloak-with-test-scope.provider=keycloak
#spring.security.oauth2.client.registration.keycloak.client-id=rita
#spring.security.oauth2.client.registration.keycloak.client-secret=3e140e26-1a8d-4207-a5b6-693043cf41c8
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/oauth2/callback/{registrationId}


# Social login provider props
spring.security.oauth2.client.registration.google.clientId=698276026178-4matcac3c9p3e4qga0ale4nrdspghqes.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.google.scope=email, profile
#spring.security.oauth2.client.registration.google.redirect_uri= http://localhost:5000
#spring.security.oauth2.client.registration.google.redirect-uri= http://localhost:5000
spring.security.oauth2.client.registration.google.redirect_uri: {baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.redirect-uri: {baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.redirectUri: {baseUrl}/oauth2/callback/{registrationId}

#spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
#spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
#spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture

spring.security.oauth2.client.registration.github.clientId=Iv1.803066d0c5566004
spring.security.oauth2.client.registration.github.clientSecret=87a54bd9bf3850253eed6a87ebb7eb096c2769f4
spring.security.oauth2.client.registration.github.redirect-uri: {baseUrl}/oauth2/callback/github
spring.security.oauth2.client.registration.github.scope=email,email

spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id


linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:5000/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
#logging.level.com=TRACE
#logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE

