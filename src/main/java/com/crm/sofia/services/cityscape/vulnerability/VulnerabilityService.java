package com.crm.sofia.services.cityscape.vulnerability;

import com.crm.sofia.model.cityscape.vulnerability.Vulnerability;
import com.crm.sofia.repository.cityscape.vulnerability.VulnerabilityRepository;
import com.crm.sofia.services.sofia.auth.JWTService;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import javax.transaction.Transactional;
import java.time.Instant;
import java.util.List;

@Service
public class VulnerabilityService {

    private final VulnerabilityRepository vulnerabilityRepository;
    private final JWTService jwtService;

    public VulnerabilityService(VulnerabilityRepository vulnerabilityRepository, JWTService jwtService) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.jwtService = jwtService;
    }

    public Vulnerability getObject(Long id) {
        Vulnerability vulnerability = this.vulnerabilityRepository.findById(id).orElseThrow(() ->
                new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Entity does not exist")
        );
        return vulnerability;
    }

    public List<Vulnerability> getObject() {
        List<Vulnerability> vulnerabilities = this.vulnerabilityRepository.findAll();
        return vulnerabilities;
    }

    @Transactional
    public Vulnerability postObject(Vulnerability vulnerability) {
        String userId = jwtService.getUserId();

        if (vulnerability.getId() != null) {
            this.getObject(vulnerability.getId());
        }

        if (vulnerability.getId() == null) {
            vulnerability.setCreatedBy(userId);
            vulnerability.setCreatedOn(Instant.now());
        }

        vulnerability.setModifiedBy(userId);
        vulnerability.setModifiedOn(Instant.now());

        return this.vulnerabilityRepository.save(vulnerability);
    }

    public Boolean delete(Long id) {
        this.vulnerabilityRepository.deleteById(id);
        return true;
    }
}
